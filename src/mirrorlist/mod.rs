mod mirror;

use crate::opts;
use chrono::{DateTime, Utc};
use mirror::Mirror;
use reqwest::blocking;
use serde::Deserialize;
use std::{cmp, io};

/// Response returned by archlinux API containing all official mirrors and their metadata
#[derive(Debug, Deserialize)]
pub struct MirrorList {
    pub cutoff: u32,
    pub last_check: String,
    pub num_checks: u8,
    pub check_frequency: u16,
    pub urls: Vec<Mirror>,
    pub version: u8,
}

impl MirrorList {
    pub fn get(url: &str) -> Result<Self, reqwest::Error> {
        blocking::get(url)?.json()
    }

    pub fn filter(&mut self, f: impl FnMut(&Mirror) -> bool) {
        self.urls.retain(f);
    }

    pub fn sort(&mut self, sorter: &opts::Sort) {
        self.urls.retain(|mirror| mirror.last_sync.is_some());

        use opts::Sort::*;
        match sorter {
            Age => self.urls.sort_unstable_by_key(|k| {
                cmp::Reverse(
                    k.last_sync
                        .as_ref()
                        .unwrap()
                        .parse::<DateTime<Utc>>()
                        .unwrap(),
                )
            }),
            Score => self
                .urls
                .sort_unstable_by(|a, b| a.score.partial_cmp(&b.score).unwrap()),
        }
    }

    fn build_output(&self, num: usize) -> String {
        let info = "# generated by rorrim";
        let date = Utc::now().format("# %C-%b-%Y at %H:%M:%S UTC");

        let output =
            self.urls
                .iter()
                .take(num)
                .map(Mirror::to_string)
                .fold(String::new(), |mut a, b| {
                    a.reserve(b.len() + 1);
                    a.push_str(b.as_str());
                    a.push('\n');
                    a
                });

        format!("{info}\n{date}\n\n{output}")
    }

    pub fn save(&self, num: usize, mut out: impl io::Write + 'static) -> io::Result<()> {
        let output = self.build_output(num);
        let bytes = output.as_bytes();

        out.write_all(bytes)
    }
}
